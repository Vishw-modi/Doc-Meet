// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  role        UserRole @default(UNASSIGNED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // PATIENT SPECIFIC FIELDS
  credits Int @default(2)

  //DOCTOR SPECIFIC FIELDS
  speciality         String?
  experience         String?
  credentialUrl      String?
  description        String?
  verificationStatus VerificationStatus? @default(PENDING)

  //Relation With other Tables

  patientAppointments Appointment[]        @relation("PatientAppointments")
  doctorAppointments  Appointment[]        @relation("DoctorAppointments")
  availabilities      Availability[]
  transactions        CreditTransactions[]
}

model Availability {
  id        String     @id @default(uuid())
  doctorId  String
  doctor    User       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)

  @@index([doctorId, startTime])
}

model Appointment {
  id                 String            @id @default(uuid())
  patientId          String
  patient            User              @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId           String
  doctor             User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime          DateTime
  endTime            DateTime
  status             AppointmentStatus @default(SCHEDULED)
  notes              String?
  patientDescription String?

  //VIDEO SESSION 
  videoSessionId    String
  videoSessionToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([doctorId, startTime])
  @@index([status, startTime])
}

model CreditTransactions {
  id        String          @id @default(uuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Int
  type      transactionType
  packageId String?
  createdAt DateTime        @default(now())
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum UserRole {
  UNASSIGNED
  PATIENT
  DOCTOR
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum transactionType {
  CREDIT_PURCHASE
  APPOINTMENT_DEDUCTION
  ADJUSTED_BY_ADMIN
}
